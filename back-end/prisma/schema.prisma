generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profissionais {
  email            String       @id
  senha            String
  nome             String
  telefone         String?
  foto             String?      @db.VarChar(2048)
  identificador    String?      @unique
  pix              String?
  permissao        Permissao    @relation(fields: [permissaoId], references: [id])
  permissaoId      Int
  especialidade    Especialidade?    @relation(fields: [especialidadeId], references: [id])
  especialidadeId  Int?
  agendamentos     Agendamentos[]
  consultas        Consultas[]
  pagamentos       Pagamentos[]
}

model Pacientes{
  cpf             String       @id
  email           String?      @unique
  nome            String
  nome_mae        String?
  data_nascimento DateTime?
  telefone        String?
  endereco        String?
  foto            String?      @db.VarChar(2048)
  agendamentos    Agendamentos[]
  consultas       Consultas[]
  paciente_dados  Pacientes_dados[]
  ConsultaAba     ConsultaAba[]
}
model Pacientes_dados{
  pacientes       Int @id @default(autoincrement())
  paciente        Pacientes? @relation(fields: [pacienteId], references: [cpf])
  pacienteId      String?
  peso            Float?      
  altura          Float?
  comestiveis     String? @db.VarChar(2048)
  tangiveis       String? @db.VarChar(2048)
  fisicos         String? @db.VarChar(2048)
  data_aplicacao  DateTime @default(now())
  alergicos       String?
}

model Agendamentos{
  id              Int @id @default(autoincrement())
  data            DateTime?
  data_conclusao  DateTime? @default(now())
  agendamento     String?
  notas           String?
  status          String?
  profissional    Profissionais? @relation(fields: [profissionalId], references: [email])
  profissionalId  String
  paciente        Pacientes? @relation(fields: [pacienteId], references: [cpf])
  pacienteId      String?
  sala_consulta   Salas? @relation(fields: [sala], references: [id])
  sala            Int?
}
model Salas{
  id              Int @id @default(autoincrement())
  notas           String?
  agendamentos    Agendamentos[]
}
model Consultas{
  id              Int @id @default(autoincrement())
  consulta        String
  data            DateTime @default(now())
  descricao       String?
  laudos          String[] @db.VarChar(2048)
  foto            String[] @db.VarChar(2048)
  paciente        Pacientes? @relation(fields: [pacienteId], references: [cpf])
  profissional    Profissionais? @relation(fields: [profissionalId], references: [email])
  pacienteId      String?
  profissionalId  String?
}
model ConsultaAba{
  pacientes       Int @id @default(autoincrement())
  paciente        Pacientes? @relation(fields: [pacienteId], references: [cpf])
  pacienteId      String?
  nome_aplicador  String?
  data_aplicacao  DateTime @default(now())      
  descricao_atividade String? @db.VarChar(2048)
  Aplicacao1      String?
  Aplicacao2      String?
  Aplicacao3      String?
  Aplicacao4      String?
  Aplicacao5      String?
  teste           String?
  observacoes     String? @db.VarChar(2048)
}

model Pagamentos{
  id              Int @id
  pagamento       Float?
  paciente        String?
  profissional    Profissionais? @relation(fields: [profissionalId], references: [email])     
  profissionalId  String?
  Data            DateTime @default(now())
}
model Permissao {
  id               Int             @id @default(autoincrement())
  acesso           String?
  profissionais    Profissionais[]
}
model Especialidade {
  id               Int             @id @default(autoincrement())
  Especialidade    String?
  profissionais    Profissionais[]
}